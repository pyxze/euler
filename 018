using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace _018
{
    class Program
    {
        public class Node
        {
            public int id;
            public static long sum = 0;

            public Node(int id)
            {
                this.id = id;
            }

            public Node()
            {
            }

            public List<Node> AdjacencyList = new List<Node>();

            public void Search(Node node, List<int> nodeSums, int sum = 0)
            {
                foreach (var n in node.AdjacencyList)
                {
                    if (n.AdjacencyList.Count == 0)
                    {
                        nodeSums.Add(sum + n.id);
                    }
                    else
                    {
                        Search(n, nodeSums, sum + n.id);
                    }
                }
            }
        }

        static void Main(string[] args)
        {
            string nodesString = @"75
95 64
17 47 82
18 35 87 10
20 04 82 47 65
19 01 23 75 03 34
88 02 77 73 07 63 67
99 65 04 28 06 16 70 92
41 41 26 56 83 40 80 70 33
41 48 72 33 47 32 37 16 94 29
53 71 44 65 25 43 91 52 97 51 14
70 11 33 28 77 73 17 78 39 68 17 57
91 71 52 38 17 14 91 43 58 50 27 29 48
63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23
";
            StringReader stringReader = new StringReader(nodesString);
            Node[,] nodes = new Node[15, 15];
            for (int i = 0; i < 15; i++)
            {
                string line = stringReader.ReadLine();
                string[] items = line.Split(' ');
                for (int j = 0; j <= i; j++)
                {
                    nodes[i, j] = new Node(int.Parse(items[j]));
                }
            }


            List<Node> nodeList = new List<Node>();
            for (int i = 0; i < 15; i++)
            {
                for (int j = 0; j <= i; j++)
                {
                    nodeList.Add(nodes[i, j]);
                }
            }

            for (int i = 0; i < 14; i++)
            {
                for (int j = 0; j <= i; j++)
                {
                    Node nodeItem = nodes[i, j];
                    nodeItem.AdjacencyList.Add(nodes[i+1, j]);
                    nodeItem.AdjacencyList.Add(nodes[i + 1, j + 1]);
                }
            }

            // show nodes with adjacent nodes
            foreach (var node in nodeList)
            {
                Console.Write(node.id + ": ");
                foreach (var node1 in node.AdjacencyList)
                {
                    Console.Write(", " + node1.id);
                }
                Console.WriteLine();
            }

            Node maxNode = nodes[0,0];
            List<int> nodeSums = new List<int>();
            maxNode.Search(maxNode, nodeSums, nodes[0,0].id);

            Console.WriteLine(nodeSums.Max());
        }
    }
}
