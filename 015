// extremely quick and dirty solution to finding number of paths in a square shaped grid
// with a diamond shaped set of nodes

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

namespace _015
{
    class Program
    {
        public class Node
        {
            public int id;
            public static long sum = 0;

            public Node(int id)
            {
                this.id = id;
            }

            public Node()
            {
            }

            public List<Node> AdjacencyList = new List<Node>();

            // this method takes a starting node and the number of sides
            // it then follows each path, calling the method recursively at each node
            // and increasing the sum of paths each time it reaches the last node
            public void Search(Node node, int sides)
            {
                int searchNumber = (sides + 1) * (sides + 1);
                foreach (var n in node.AdjacencyList)
                {
                    if (n.id == searchNumber)
                    {
                        sum++;
                    }
                    else
                    {
                        Search(n, sides);
                    }
                }
            }
        }

        static void Main(string[] args)
        {
            int count = 1;
            int sides = 20;
            int nodesize = sides + 1;
            int[,] nodes = new int[sides * 2 + 1, nodesize];

            // fill array with node ids walking up and down triangle shape
            for (int i = 0; i <= sides; i++)
            {
                for (int j = 0; j <= i; j++)
                {
                    Console.Write(count + " ");
                    nodes[i, j] = count;
                    count++;
                    if (j == i)
                        Console.WriteLine();
                }
            }
            for (int i = sides - 1; i >= 0; i--)
            {
                for (int j = 0; j <= i; j++)
                {
                    Console.Write(count + " ");
                    nodes[sides * 2 - i, j] = count;
                    count++;
                    if (j == i)
                        Console.WriteLine();
                }
            }

            // create nodes with values from array walking up and down triangle
            List<Node> nodeList = new List<Node>();

            for (int i = 0; i <= sides; i++)
            {
                for (int j = 0; j <= i; j++)
                {
                    Console.Write(nodes[i,j]);
                    nodeList.Add(new Node(nodes[i, j]));
                }
                Console.WriteLine();
            }

            for (int i = sides - 1; i >= 0; i--)
            {
                for (int j = 0; j <= i; j++)
                {
                    Console.Write(nodes[sides * 2 - i, j]);
                    nodeList.Add(new Node(nodes[sides * 2 - i, j]));
                }
                Console.WriteLine();
            }

            // build adjacency lists walking up and down triangle again
            for (int i = 0; i <= sides -1; i++)
            {
                for (int j = 0; j <= i; j++)
                {
                    Node nodeItem;
                    nodeItem = nodeList.Find(delegate(Node node) { return node.id == nodes[i, j]; });
                    nodeItem.AdjacencyList.Add(nodeList.Find(delegate(Node node) { return node.id == nodes[i+1, j]; }));
                    nodeItem.AdjacencyList.Add(nodeList.Find(delegate(Node node) { return node.id == nodes[i+1, j+1]; }));
                }
            }

            for (int i = sides; i <= sides * 2 - 1; i++)
            {
                for (int j = 0; j <= sides * 2 - i; j++)
                {
                    if (j == 0)
                    {
                        Node nodeItem;
                        nodeItem = nodeList.Find(delegate(Node node) { return node.id == nodes[i, j]; });
                        nodeItem.AdjacencyList.Add(nodeList.Find(delegate(Node node) { return node.id == nodes[i + 1, j]; }));
                    }
                    else if (j == sides * 2 - i)
                    {
                        Node nodeItem;
                        nodeItem = nodeList.Find(delegate(Node node) { return node.id == nodes[i, j]; });
                        nodeItem.AdjacencyList.Add(nodeList.Find(delegate(Node node) { return node.id == nodes[i + 1, j - 1]; }));
                    }
                    else
                    {
                        Node nodeItem;
                        nodeItem = nodeList.Find(delegate(Node node) { return node.id == nodes[i, j]; });
                        nodeItem.AdjacencyList.Add(nodeList.Find(delegate(Node node) { return node.id == nodes[i + 1, j - 1]; }));
                        nodeItem.AdjacencyList.Add(nodeList.Find(delegate(Node node) { return node.id == nodes[i + 1, j]; }));
                    }
                }
            }

            // show nodes with adjacent nodes
            foreach (var node in nodeList)
            {
                Console.Write(node.id + ": ");
                foreach (var node1 in node.AdjacencyList)
                {
                    Console.Write(", " + node1.id);
                }
                Console.WriteLine();
            }

            // start search
            Node nodeItemSearch = new Node();
            nodeItemSearch.Search(nodeList.Find(delegate(Node node) { return node.id == 1; }), sides);
            Console.WriteLine(Node.sum);
        }
    }
}

